// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "simple-wallet/internal/module/user/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UserRepositoryInterface) GetByID(ctx context.Context, userID int64) *domain.UserEntity {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.UserEntity
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.UserEntity); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserEntity)
		}
	}

	return r0
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

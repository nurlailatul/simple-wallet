// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "simple-wallet/internal/module/transaction/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceInterface is an autogenerated mock type for the TransactionServiceInterface type
type TransactionServiceInterface struct {
	mock.Mock
}

// DeductBalance provides a mock function with given fields: ctx, request
func (_m *TransactionServiceInterface) DeductBalance(ctx context.Context, request domain.DeductBalanceRequest) (*domain.DeductBalanceResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeductBalance")
	}

	var r0 *domain.DeductBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeductBalanceRequest) (*domain.DeductBalanceResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeductBalanceRequest) *domain.DeductBalanceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DeductBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.DeductBalanceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByReferenceID provides a mock function with given fields: ctx, referenceID
func (_m *TransactionServiceInterface) GetByReferenceID(ctx context.Context, referenceID string) *domain.TransactionEntity {
	ret := _m.Called(ctx, referenceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByReferenceID")
	}

	var r0 *domain.TransactionEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.TransactionEntity); ok {
		r0 = rf(ctx, referenceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TransactionEntity)
		}
	}

	return r0
}

// NewTransactionServiceInterface creates a new instance of TransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServiceInterface {
	mock := &TransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
